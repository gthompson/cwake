: # use perl
eval 'exec $ANTELOPE/bin/perl -S $0 "$@"'
if 0;

use lib "$ENV{ANTELOPE}/data/perl" ;
##############################################################################
# Author: Glenn Thompson (GT) 2009
#         ALASKA VOLCANO OBSERVATORY
#
# History:
#       2009-04-17: Created by GT, based on dbswarmdetect, a static threshold swarm detection module
#
# To do:
##############################################################################

use Datascope;
use Getopt::Std;

use strict;
#use warnings;
# Get the program name
our $PROG_NAME;
($PROG_NAME = $0) =~ s(.*/)();  # PROG_NAME becomes $0 minus any path

# Usage - command line options and arguments
our ($opt_v, $opt_p);
if ( ! &getopts('p:v') || $#ARGV > -1  ) {
    print STDERR <<"EOU" ;


    Usage: $PROG_NAME [-p pffile] 

    For more information:
        > man $PROG_NAME
EOU
    exit 1 ;
}

use Avoseis::SwarmAlarm;

printf("\n**************************************\n\nRunning $PROG_NAME at %s\n\n", epoch2str(now(),"%Y-%m-%d %H:%M:%S"));

#### COMMAND LINE ARGUMENTS
# None!


# read parameter file
print "Reading parameter file for $PROG_NAME\n" if $opt_v;
my ($event_db, $station_db, $waveform_db) = &getParams($PROG_NAME, $opt_p, $opt_v);


# End of  GT Antelope Perl header
###########################################################################################
use Env;
use File::Basename qw(dirname basename);
use File::Path qw(mkpath);

# Include local perl modules
use lib "/home/glenn/perllib/lib/site_perl";

# Use today for default date
my @month = qw(JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC);
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime();
my $inputmonth = $month[$mon];
my $inputyear = $year + 1900;
my $input =  "$mday-$inputmonth-$inputyear";

###############################
# THE FOLLOWING SECTION IS FROM
# http://www.opensourcetutorials.com/tutorials/Server-Side-Coding/Perl/advanced-widgets-perl-tk/page2.html

use Tk;
use Tk::DateEntry;
use Time::Local;

my %idx_for_mon = ( JAN=>1, FEB=>2, MAR=>3, APR=> 4, MAY=> 5, JUN=> 6,
		 JUL=>7, AUG=>8, SEP=>9, OCT=>10, NOV=>11, DEC=>12 );
#$input = '01-APR-2004'; # Initial value for display

my $mw = MainWindow->new();
#$mw->geometry( '200x80' );
$mw->geometry( '360x160' );
$mw->resizable( 0, 0 );

our $progressLabel = $mw->Label( -text=>'' )->pack(-side=>'bottom');
my $dateentryLabel = $mw->Label( -text=>'Which Day?' )->pack(-side=>'top');
my $dayDateEntry = $mw->DateEntry( -textvariable=>\$input, -width=>11,
			 -parsecmd=>\&parse, -formatcmd=>\&format )->pack(-side=>'top');
our $label;
$mw->Button( -text=>'Quit', -command=>sub{ exit } )->pack( -side=>'right' );
$mw->Button( -text=>'Convert',
	     -command=>sub{ convert( $input, $label ) } )->pack( -side=>'left' );

# Add a checkout widget
$mw->Button( -text=>'Checkout',
	     -command=>sub{ checkout( $input, $label ) } )->pack( -side=>'left' );

# Add a user widget
our $analyst=$ENV{USER};
#my $analystListBox = $mw->Scrolled("Listbox", -scrollbars => "e", -selectmode => 'single', -height=>3)->pack();
#$analystListBox->insert('end',qw/scott jp jim cheryl glenn/);
#$analystListBox->activate(1);
#$analystListBox->focus();
#$analystListBox->bind('<Button-1>',
#	sub { 
#		$analyst = $analystListBox->curselection(); 
		#print "$analyst\n";
#	}
#);

MainLoop;

# called on dropdown with content of \$textvariable, must return ( $yr, $mon, $day )
sub parse {
  my ( $day, $mon, $yr ) = split '-', $_[0];
  return ( $yr, $idx_for_mon{$mon}, $day );
}

# called on user selection with ($yr, $mon, $day), must return formatted string
sub format {
  my ( $yr, $mon, $day ) = @_;
  my %mon_for_idx = reverse %idx_for_mon;
  return sprintf( "%02d-%s-%2d", $day, $mon_for_idx{ $mon }, $yr );
}

# perform the conversion to epoch seconds when the corresponding button is pressed
sub convert {
  my ( $input, $label ) = @_;
  my ( $yr, $mon, $day ) = parse( $input );
  my $output = "Epoch seconds: " . timelocal( 0, 0, 0, $day, $mon-1, $yr-1900 );
  $progressLabel->configure( -text => $output );
}

###################################


###############################################################################
### CHECKOUT DAY FOR PROCESSING                                              ##
###############################################################################  
# Check-out the daily database for processing
sub checkout {
  my ( $input, $label ) = @_;
  my ( $yr, $mon, $day ) = parse( $input );
  my $sepoch = timelocal( 0, 0, 0, $day, $mon-1, $yr-1900 );
  my $eepoch = $sepoch + 86400;
  my $sepochstr = epoch2str($sepoch, '%m/%d/%Y');
  my $eepochstr = epoch2str($eepoch, '%m/%d/%Y');
  my $output = "Extracting $yr/$mon/$day from $event_db";
  $progressLabel->configure( -text => $output );

  #my $mydb = $ENV{USER}.$yr.$mon.$day;
  my $mydb = $analyst.$yr.$mon.$day;
  
  # Extract
  #$event_dbpath = db2dbpath($event_db, $yr, $mon, $day);
  &runCommand("extractavodb -af -i $event_db $sepochstr $eepochstr $mydb", 1);
  if (-e "$event_db.lastid") {
  	&runCommand("cp $event_db.lastid $mydb.lastid");
  } else {
	print "No lastid table for $event_db\n";
	&runCommand("makelastid $mydb");
  }

  # Rewrite descriptor
  # First make sure the waveform database exists
  my $waveform_dbpath = db2dbpath($waveform_db, $yr, $mon, $day);
  # Then make sure the station database exists
  my $station_dbpath = db2dbpath($station_db);
  # Write descriptor
  open(FDESC, ">$mydb");
  print FDESC<<"EOF";
#
schema css3.0
dbpath $station_dbpath:$waveform_dbpath
EOF
  close(FDESC);

  exit;
}

###############################################################################
## DB2DBPATH
###############################################################################
sub db2dbpath {
	my ($db, $y, $m, $d) = @_;
	my $test_db = "";
	if (defined($d)) {
		$test_db = $db."_".$y."_".$m."_".$d;
	}
	$test_db = $db unless (-e $test_db);
	unless (-e $test_db) {
		print "$test_db does not exist\n";
		exit;
	} 
	my $dir = dirname($db);
	my $base = basename($test_db);
	my $dbpath = $dir."/{".$base."}";
	return $dbpath;
}	


###############################################################################
### LOAD PARAMETER FILE                                                      ##
### Load the parameter file for this program, given its path                 ##  
###############################################################################  
sub getParams {                                                                  

        my ($PROG_NAME, $opt_p, $opt_v) = @_;
        my $pfobjectref = &getPf($PROG_NAME, $opt_p, $opt_v);
   
        my ($event_db, $station_db,$waveform_db);     
                                                                                                                                                                                                                   

        $event_db          = $pfobjectref->{'event_db'};
        $station_db             = $pfobjectref->{'station_db'};
        $waveform_db            = $pfobjectref->{'waveform_db'};

        return ($event_db, $station_db,$waveform_db);
}


